p + geom_line()
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Block) )
p + + stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Block) )
p +  stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime) )
p +  stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime) )
p +  stat_summary(fun.y="mean", geom="line")
dataMeasures
dataMeasures$MovementTime
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=Block) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=factor(DeviceNumber) )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber )
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber ))
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=DeviceNumber ))
p +  stat_summary(fun.y="mean", geom="bar")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=DeviceNumber ))
p +  stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p +  stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p +  stat_summary(fun.y="mean", geom="line") + geom_point()
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + geom_point(aes(color=DeviceNumber, shape=DeviceNumber)) +
stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + geom_point(aes(color=DeviceNumber, shape=factor(DeviceNumber)) +
stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + geom_point(aes(color=DeviceNumber, shape=factor(DeviceNumber)) +stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + geom_point(aes(color=DeviceNumber, shape=factor(DeviceNumber))) +stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + geom_point(aes(color=factor(DeviceNumber), shape=factor(DeviceNumber))) +stat_summary(fun.y="mean", geom="line")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
levels(dataMeasures$DeviceNumber)
dataMeasures$DeviceNumber
levels(dataMeasures$DeviceNumber) <- c("LeapMotion", "Touchpad")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
dataMeasures$DeviceNumber
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
levels(dataMeasures$DeviceNumber) <- c("LeapMotion", "Touchpad")
class(dataMeasures$DeviceNumber)
levels(dataMeasures$DeviceNumber) <- c("LeapMotion", "Touchpad")
dataMeasures$DeviceNumber <- as.factor(dataMeasures$DeviceNumber)
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=factor(DeviceNumber), colour=factor(DeviceNumber) ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=factor(DeviceNumber) ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
dataMeasures$DeviceNumber
dataMeasures$DeviceNumber <- as.factor(dataMeasures$DeviceNumber)
levels(dataMeasures$DeviceNumber) <- c("LeapMotion", "Touchpad")
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=DeviceNumber, colour=DeviceNumber ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
colnames(dataMeasures)
colnames(dataMeasures)["DeviceNumber"]
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"]
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
colnames(dataMeasures)
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion", "Touchpad")
dataMeasures
p <- ggplot(dataMeasures, aes(x=factor(Block), y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "movementtime-block.pdf", width=8/2.54, height=5/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "movementtime-block.pdf", width=8/2.54, height=5/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "movementtime-block.pdf", width=19/2.54, height=10/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Block+DeviceNumber, data=dataMeasures)
s
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion", "Touchpad")
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion", "Touchpad", "Mouse")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
dataMeasures$Device
dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Block+DeviceNumber, data=dataMeasures)
s
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
dataMeasures$Device
column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion", "Touchpad", "Mouse")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
dataMeasures$Device
dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Block+DeviceNumber, data=dataMeasures)
s
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion",  "Mouse", "Touchpad")
# Plot the calculated distances
plot(dataMeasures$CalculatedDistance)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
# Functions
rotationMatrix <- function(angle) {
matrix <- matrix(c(cos(angle), sin(angle), -sin(angle), cos(angle)), nrow = 2, ncol = 2)
return(matrix)
}
rotate <- function(point, angle) {
return( point %*% rotationMatrix(angle) )
}
angleBetween <- function(v1, v2) {
dot <- sum(v1*v2);# v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
v1mag <- sqrt(v1[1] * v1[1] + v1[2] * v1[2] );
v2mag <- sqrt(v2[1] * v2[1] + v2[2] * v2[2] );
amt <- dot / (v1mag * v2mag);
if (amt <= -1) {
return (pi)
} else if (amt >= 1) {
return (0)
}
return ( acos(amt) );
}
rotateAround <- function(referencePoint, point, angle) {
displacement <- point-referencePoint
rotatedPoint <- rotate(point-displacement, angle)
rotatedPoint <- rotatedPoint + displacement
return( rotatedPoint)
}
toDegrees <- function(radians) {
return( radians*360/(2*pi) )
}
############################ data
device <- "mouse"
filename <- paste("data/",device,".txt", sep="")
filenameTransformed <- paste("data/", device,"-transformed.txt", sep="")
filenameMeasures <- paste("data/", device,"-measures.txt", sep="")
dataRaw <- read.csv(file=filename, head=TRUE, sep="")
#dataRaw <- dataRaw[dataRaw$Block == 1 & dataRaw$Sequence == 1, ]
#edit(dataRaw)
dataMeasures <- data.frame()#NumberDevice=numeric(0), UserId=numeric(0), Block=numeric(0), Sequence=numeric(0), ErrorRate=numeric(0))
startTime <- Sys.time()
for (block in 1:max(dataRaw$Block) ) {
#for (block in 1:1 ) {
print(paste("Block: ", block))
for (sequence in 1:max(dataRaw$Sequence) ) {
#for (sequence in 1:1 ) {
print(paste("Sequence: ", sequence))
for (cid in 1:max(dataRaw$CircleID) ) {
#for (cid in 1 ) {
print(paste("CircleID: ", cid))
#indexes for the current target selection
indexes <- which(dataRaw$Block == block & dataRaw$Sequence == sequence & dataRaw$CircleID == cid)
partial <- dataRaw[indexes, ]
# we consider the movement axis as a line goind from the first point to the center of the target
axisStart <- c(partial[1,]$MouseX, partial[1,]$MouseY)
axisEnd <- c(partial[nrow(partial),]$PixelEndCircleX, partial[nrow(partial),]$PixelEndCircleY)
axis <- axisEnd-axisStart
#print(axis)
# TODO: check why some selections started and ended on the same point
# these lines guarantee that we skip these errors
if (axis[1] == 0 & axis[2] == 0 ) {
print(paste("Error? Block:", block, " Sequence: ", sequence, " CircleID: ", cid, " Axis:", axis))
next
}
# we will transform the coordinates so that the movements axis is horizontal, and starts at (0, 0)
angle <- angleBetween( c(1, 0), axis )
if ( axis[2] < 0) {
angle <- -angle
}
# transform also the target coordinates, so we can calculate the TRE measure
point <- c(dataRaw[indexes[1],]$PixelEndCircleX, dataRaw[indexes[1],]$PixelEndCircleY)-axisStart
target <- rotate(point, angle )
dataRaw$targetx[indexes[1]]<-target[1,1]
dataRaw$targety[indexes[1]]<-target[1,2]
# calculated distance (first click - target)
calculatedDistance <- dist(rbind(target, c(0,0)))[1]
# go through all coordinates, transform them and calculate the various measures.
errorRate <- (partial[1,]$NumberClicks-1)/partial[1,]$NumberClicks
TRE <- -1
entered <- FALSE
TAC <- 0
prevTACY <- 0
MDC <- 0
prevMDCY <- 0
prevMDCDif <- 0
ODC <- 0
prevODCX <- 0
prevODCDif <- 0
MO <- 0
MV <- 0
ys <- c()
ME <- 0
# will hold the click point (transformed) this is the last coordinate found in the selection movement
clickPointX <- 0
clickPointY <- 0
for (n in indexes ) {
dataRaw$targetx[n]<-target[1,1]
dataRaw$targety[n]<-target[1,2]
# transform the coordinate
point <- c(dataRaw[n,]$MouseX, dataRaw[n,]$MouseY)-axisStart
newPoint <- rotate(point, angle )
dataRaw$rx[n]<-newPoint[1,1]
dataRaw$ry[n]<-newPoint[1,2]
#print(target)
#print(newPoint)
#print(" ")
clickPointX <- newPoint[1,1]
clickPointY <- newPoint[1,2]
#TRE
if (dist(rbind(newPoint, target)) < dataRaw[n,]$TargetWidth/2) {
if ( !entered ) {
entered <- TRUE
TRE <- TRE + 1
}
dataRaw$inside[n]<-TRUE
}else {
entered <- FALSE
dataRaw$inside[n]<-FALSE
}
#TAC
curY <- newPoint[1, 2]
if ( prevTACY*curY < 0 ) {
TAC <- TAC +1
}
prevTACY <- curY
#MDC
curDif <- curY-prevMDCY
#print(paste("prevMDCDif:", prevMDCDif ,"prevMDCY: ", prevMDCY, " curDif:", curDif))
if ( prevMDCDif * curDif < 0 ) {
MDC <- MDC +1
#print("+1")
}
if ( curDif != 0 ) {
prevMDCDif <- curDif
}
prevMDCY <- curY
#ODC
curX <- newPoint[1, 1]
curDif <- curX-prevODCX
if ( prevODCDif * curDif < 0 ) {
ODC <- ODC +1
}
if ( curDif != 0 ) {
prevODCDif <- curDif
}
prevODCX <- curX
#MO
MO <- MO + curY
#MV
ys <- append(ys, curY)
}
#dataRaw$targety[indexes] <- targetsY
#dataRaw$targetx[indexes] <- targetsX
#MO
MO <- MO / length(indexes)
#MV
MV <- sqrt(sum((ys-MO)*(ys-MO))/(length(indexes)-1))
#ME
ME <- sum(abs(ys))/length(indexes)
#print(paste("ErrorRate:", errorRate))
#print(paste("TRE: ", TRE))
#print(paste("TAC: ", TAC))
#print(paste("MDC: ", MDC))
#print(paste("ODC: ", ODC))
#print(paste("MV: ", MV))
#print(paste("ME: ", ME))
#print(paste("MO: ", MO))
row <- c(partial[1,]$NumberDevice, partial[1,]$UserId, partial[1,]$Block, partial[1,]$Sequence, partial[1,]$CircleID, errorRate, TRE, TAC, MDC, ODC, MV, ME, MO, clickPointX, clickPointY, partial[1,]$ElapsedTime/1000, partial[1,]$TargetWidth, partial[1,]$DistanceCenter*2, calculatedDistance)
dataMeasures <- rbind(dataMeasures, row)
}
}
}
names(dataMeasures) <- c("DeviceNumber", "UserId", "Block", "Sequence", "CircleID", "ErrorRate", "TRE", "TAC", "MDC", "ODC", "MV", "ME", "MO", "ClickPointX", "ClickPointY", "MovementTime", "TargetWidth", "Distance", "CalculatedDistance")
# Plot the calculated distances
plot(dataMeasures$CalculatedDistance)
#Calculate throughput
meanX <- mean(dataMeasures$ClickPointX)
meanY <- mean(dataMeasures$ClickPointY)
diffX <- dataMeasures$ClickPointX-meanX
diffY <- dataMeasures$ClickPointY-meanY
diffSQX <- diffX*diffX
diffSQY <- diffY*diffY
SD <- sqrt(sum(diffSQX+diffSQY)/length(diffX))
We <- 4.133*SD
IDe <- log(dataMeasures[1,]$Distance/We + 1)
Throughput <- IDe/dataMeasures$MovementTime
endTime <- Sys.time()
print(paste("Total time: ", endTime-startTime))
#summary(dataMeasures)
write.table(dataRaw, file = filenameTransformed, sep=" ", row.names=FALSE)
write.table(dataMeasures, file = filenameMeasures, sep=" ", row.names=FALSE)
toplot <- dataRaw[dataRaw$Block == 1 & dataRaw$Sequence == 1 & dataRaw$CircleID ==3, ]
plot(toplot$rx,
toplot$ry, type='l')
############################ data
filename <- "leapmotion-measures.txt"
dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Block+DeviceNumber, data=dataMeasures)
s
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion",  "Mouse", "Touchpad")
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point")
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device, data=dataMeasures)
s
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
s
t(s)
aov(Alertness~Dosage,data=ex1)
aov(MovementTime~Device,data=dataMeasures)
sumary(a)
summary(a)
a <- aov(MovementTime~Device,data=dataMeasures)
summary(a)
a <- aov(TRE+MovementTime~Device,data=dataMeasures)
summary(a)
a <- aov(TRE*MovementTime~Device,data=dataMeasures)
summary(a)
a <- aov(TRE~Device,data=dataMeasures)
summary(a)
a <- aov(TAC~Device,data=dataMeasures)
summary(a)
bartlett.test(MovementTime~Device,data=dataMeasures)
a <- aov(MDC~Device,data=dataMeasures)
summary(a)
a <- aov(ODC~Device,data=dataMeasures)
summary(a)
a <- aov(ME~Device,data=dataMeasures)
summary(a)
a <- aov(MV~Device,data=dataMeasures)
summary(a)
a <- aov(ME~Device,data=dataMeasures)
summary(a)
a <- aov(MO~Device,data=dataMeasures)
summary(a)
a <- aov(ErrorRate~Device,data=dataMeasures)
summary(a)
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
plot(s$TRE.mean, s$MO.mean)
plot(s$TRE.mean, abs(s$MO.mean))
p <- ggplot(dataMeasures, aes(x=MO, y=TRE, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", fun.x="mean" geom="point")
p <- ggplot(dataMeasures, aes(x=MO, y=TRE, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", fun.x="mean", geom="point")
p <- ggplot(s, aes(x=TRE.mean, y=MO.mean, group=Device, colour=Device ))
p + geom_point()
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point()
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) xlab("My x label") +
ylab("My y label")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + xlab("My x label") +   ylab("My y label")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + ylab("Movement offset (pixels)") +  xlab("Target Re-Entry")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
+ ylab("Movement offset (pixels)") +  xlab("Target Re-Entry")
+ scale_x_continuous(limits = c(0, 0.4))
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p + ylab("Movement offset (pixels)")
p +  xlab("Target Re-Entry")
p + scale_x_continuous(limits = c(0, 0.4))
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p + ylab("Movement offset (pixels)")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p <- p + ylab("Movement offset (pixels)")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p <- p + ylab("Movement offset (pixels)")
p <- p +  xlab("Target Re-Entry")
p <- p + scale_x_continuous(limits = c(0, 0.4))
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p <- p + ylab("Movement offset (pixels)")
p <- p +  xlab("Target Re-Entry")
p <- p + coord_cartesian(xlim = c(0, 0.4))
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + coord_cartesian(xlim = c(0, 0.4))
p <- p + ylab("Movement offset (pixels)")
p <- p +  xlab("Target Re-Entry")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5)
p <- p + coord_cartesian(xlim = c(0, 0.4))
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8))
p <- p + ylab("Movement offset (pixels)")
p <- p +  xlab("Target Re-Entry")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8))
p <- p + ylab("Movement offset (pixels)")
p <- p +  xlab("Target Re-Entry")
ggsave(file = "charts/MO-TRE.pdf", width=20/2.54, height=16/2.54, dpi=100)
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8)) +
ylab("Movement offset (pixels)") +
xlab("Target Re-Entry")
ggsave(file = "charts/MO-TRE.pdf", width=20/2.54, height=16/2.54, dpi=100)
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5, shape=Device) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8)) +
ylab("Movement offset (pixels)") +
xlab("Target Re-Entry")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5, aes(shape=Device)) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8)) +
ylab("Movement offset (pixels)") +
xlab("Target Re-Entry")
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5, aes(shape=Device)) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8)) +
ylab("Movement offset (pixels)") +
xlab("Target Re-Entry")
ggsave(file = "charts/MO-TRE.pdf", width=20/2.54, height=16/2.54, dpi=100)
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device ))
p + stat_summary(fun.y="mean", geom="line") + stat_summary(fun.y="mean", geom="point", aes(shape=Device))
ggsave(file = "charts/movementtime-block.pdf", width=20/2.54, height=16/2.54, dpi=100)
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- c("LeapMotion",  "Mouse", "Touchpad")
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
# analysis of variance
bartlett.test(MovementTime~Device,data=dataMeasures)
a <- aov(MovementTime~Device,data=dataMeasures)
summary(a)
a
a->F
a->F.F
a.F
lm(ErrorRate~Device,data=dataMeasures)
l<-lm(ErrorRate~Device,data=dataMeasures)
summary(l)
