ME <- sum(abs(ys))/length(indexes)
row <- c(partial[1,]$NumberDevice, partial[1,]$UserId, partial[1,]$Block, partial[1,]$Sequence, partial[1,]$CircleID, errorRate, TRE, TAC, MDC, ODC, MV, ME, MO, clickPointX, clickPointY, partialtargetx[1], partialtargety[1], partial[1,]$ElapsedTime/1000, partial[1,]$TargetWidth, partial[1,]$DistanceCenter*2, calculatedDistance)
dataMeasures <- rbind(dataMeasures, row)
partial$targetx <- partialtargetx
partial$targety <- partialtargety
partial$rx <- partialrx
partial$ry <- partialry
partial$inside <- partialinside
partial$speeds <- speeds
partial$accels <- accels
#newData <- rbind(newData, partial)
newDataSequence <- rbind(newDataSequence, partial)
}
newDataBlock <- rbind(newDataBlock, newDataSequence)
}
newDataDevice <- rbind(newDataDevice, newDataBlock)
}
newDataUser <- rbind(newDataUser, newDataDevice)
}
newData <- rbind(newData, newDataUser)
}
)
names(dataMeasures) <- c("DeviceNumber", "UserId", "Block", "Sequence", "CircleID", "ErrorRate", "TRE", "TAC", "MDC", "ODC", "MV", "ME", "MO", "ClickPointX", "ClickPointY","TargetX","TargetY", "MovementTime", "TargetWidth", "Distance", "CalculatedDistance")
#
print(paste("Noise errors found: ", countNoiseErrors))
# Calculate throughput
dataMeasures$Throughput <- -1
for ( device in unique(dataMeasures$Device)) {
#for ( device in 1) {
#device <- "Mouse"
meanX <- mean(dataMeasures[dataMeasures$Device == device,]$ClickPointX - dataMeasures[dataMeasures$Device == device,]$TargetX)
meanY <- mean(dataMeasures[dataMeasures$Device == device,]$ClickPointY - dataMeasures[dataMeasures$Device == device,]$TargetY )
diffX <- (dataMeasures[dataMeasures$Device == device,]$ClickPointX - dataMeasures[dataMeasures$Device == device,]$TargetX)-meanX
diffY <- (dataMeasures[dataMeasures$Device == device,]$ClickPointY - dataMeasures[dataMeasures$Device == device,]$TargetY)-meanY
diffSQX <- diffX*diffX
diffSQY <- diffY*diffY
SD <- sqrt(sum(diffSQX+diffSQY)/(length(diffX)-1))
We <- 4.133*SD
IDe <- log(dataMeasures[dataMeasures$Device == device,]$CalculatedDistance/We + 1, 2)
Throughput <- IDe/dataMeasures[dataMeasures$Device == device,]$MovementTime
dataMeasures[dataMeasures$Device == device,]$Throughput <-Throughput
}
#
# meanX <- mean(dataMeasures$ClickPointX)
# meanY <- mean(dataMeasures$ClickPointY)
#
# diffX <- dataMeasures$ClickPointX-meanX
# diffY <- dataMeasures$ClickPointY-meanY
#
# diffSQX <- diffX*diffX
# diffSQY <- diffY*diffY
#
# SD <- sqrt(sum(diffSQX+diffSQY)/(length(diffX)-1))
# We <- 4.133*SD
# IDe <- log(dataMeasures[1,]$Distance/We + 1, 2)
# Throughput <- IDe/dataMeasures$MovementTime
# dataMeasures$Throughput <-Throughput
write.table(newData, file = filenameTransformed, sep=" ", row.names=FALSE)
write.table(dataMeasures, file = filenameMeasures, sep=" ", row.names=FALSE)
#
#
#
# # Plot the calculated distances
# plot(dataMeasures[dataMeasures$DeviceNumber==0,]$CalculatedDistance)
#
#
# toplot <- newData[newData$NumberDevice==0 & newData$Block == 1 & newData$Sequence == 1 & newData$CircleID ==3, ]
#
# plot(toplot$speed, type='l')
#
#
#require(RCurl) # web
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
#dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
#dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
#dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
#dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
dataMeasures <- read.csv(file="data/measures.txt", head=TRUE, sep="")
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- list( LeapMotion=c(0),  Mouse=c(1), Touchpad=c(2), LeapMotionTouchless=c(4))
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
# plot the boxplots of the movement time for each device
p <- ggplot(dataMeasures, aes(Device, y=MovementTime,  colour=Device )) +
geom_boxplot() +
coord_flip() +
theme(legend.position="none") +
theme()
p
ggsave(file = "charts/movementtime-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the ErrorRate for each device
p <- ggplot(dataMeasures, aes(Device, y=ErrorRate,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/errorrate-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the TRE for each device
p <- ggplot(dataMeasures, aes(Device, y=TRE,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/tre-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the TAC for each device
p <- ggplot(dataMeasures, aes(Device, y=TAC,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/tac-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the MDC for each device
p <- ggplot(dataMeasures, aes(Device, y=MDC,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/mdc-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the ODC for each device
p <- ggplot(dataMeasures, aes(Device, y=ODC,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/odc-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the MV for each device
p <- ggplot(dataMeasures, aes(Device, y=MV,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/mv-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the ME for each device
p <- ggplot(dataMeasures, aes(Device, y=ME,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/me-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the MO for each device
p <- ggplot(dataMeasures, aes(Device, y=MO,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/mo-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the boxplots of the Throughput for each device
p <- ggplot(dataMeasures, aes(Device, y=Throughput,  colour=Device )) +
geom_boxplot() + #outlier.shape = NA) +
coord_flip() +
theme(legend.position="none") +
#scale_y_continuous(limits = c(0, 0.2)) +
theme() #noop
p
ggsave(file = "charts/throughput-boxplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the movement offset over the TRE for each device
p <- ggplot(s, aes(x=TRE.mean, y=abs(MO.mean), group=Device, colour=Device ))
p + geom_point(size=5, aes(shape=Device)) + coord_cartesian(xlim = c(0, 0.4), ylim=c(0, 8)) +
ylab("Movement offset (pixels)") +
xlab("Target Re-Entry")
ggsave(file = "charts/MO-TRE.pdf", width=20/2.54, height=16/2.54, dpi=100)
# line plot movement time over block for each device
p <- ggplot(dataMeasures, aes(x=Block, y=MovementTime, group=Device, colour=Device )) +
stat_summary(fun.y="mean", geom="line") +
stat_summary(fun.y="mean", geom="point", aes(shape=Device)) +
theme(legend.direction = "horizontal", legend.position = "top") +
theme() #noop
p
ggsave(file = "charts/movementtime-block-lineplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the throughput
p <- ggplot(dataMeasures, aes(x=Device,y=Throughput, group=Device, colour=Device )) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.y="mean", geom="point", aes(shape=Device)) +
theme()
p
ggsave(file = "charts/Throughput.pdf", width=20/2.54, height=16/2.54, dpi=100)
# plot the throughput over block
p <- ggplot(dataMeasures, aes(x=Block, y=Throughput, group=Device, colour=Device )) +
stat_summary(fun.y="mean", geom="line") +
stat_summary(fun.y="mean", geom="point", aes(shape=Device)) +
theme(legend.direction = "horizontal", legend.position = "top") +
theme()
p
ggsave(file = "charts/Throughput-block-lineplot.pdf", width=20/2.54, height=16/2.54, dpi=100)
# analysis of variance
bartlett.test(MovementTime~Device,data=dataMeasures)
a <- aov(MovementTime~Device,data=dataMeasures)
summary(a)
a <- aov(ErrorRate~Device,data=dataMeasures)
summary(a)
a <- aov(TRE~Device,data=dataMeasures)
summary(a)
a <- aov(TAC~Device,data=dataMeasures)
summary(a)
a <- aov(MDC~Device,data=dataMeasures)
summary(a)
a <- aov(ODC~Device,data=dataMeasures)
summary(a)
a <- aov(MV~Device,data=dataMeasures)
summary(a)
a <- aov(ME~Device,data=dataMeasures)
summary(a)
a <- aov(MO~Device,data=dataMeasures)
summary(a)
names(dataMeasures)
boxplot(dataMeasures$MovementTime)
#require(RCurl) # web
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
#dataTransformedLeap <- read.csv(file="data/leapmotion-transformed.txt", head=TRUE, sep="")
#dataTransformedTouch <- read.csv(file="data/touchpad-transformed.txt", head=TRUE, sep="")
#dataTransformedMouse <- read.csv(file="data/mouse-transformed.txt", head=TRUE, sep="")
#dataTransformed <- rbind(dataTransformedLeap, dataTransformedTouch, dataTransformedMouse)
dataTransformed <- read.csv(file="data/transformed.txt", head=TRUE, sep="")
# change column name to get a nicer chart
colnames(dataTransformed)[colnames(dataTransformed)=="NumberDevice"] <- "Device"
# convert the column to factor and name the levels
dataTransformed$Device <- as.factor(dataTransformed$Device)
levels(dataTransformed$Device) <- list( LeapMotion=c(0),  Mouse=c(1), Touchpad=c(2), LeapMotionTouchless=c(4))
#levels(dataTransformed$Device) <- c("Mouse")
#calculate the maximum and minimum y and x coords for setting the plots' scales
minX <- min(dataTransformed$rx)
maxX <- max(dataTransformed$rx)
minY <- min(dataTransformed$ry)
maxY <- max(dataTransformed$ry)
print ( paste("X scale: ", minX, maxX, " Y scale: ", minY, maxY))
#
# # plot the Speed
# plot(dataTransformed[dataTransformed$Device=="Touchpad" &
#                          dataTransformed$UserId==4 &
#                          dataTransformed$Block ==1 &
#                          dataTransformed$Sequence==1 &
#                          dataTransformed$CircleID==1,]$accels)
# ggplot(dataTransformed[dataTransformed$Device=="Touchpad" &
#                                 dataTransformed$UserId==4 & dataTransformed$Block ==1 & dataTransformed$Sequence==1 & dataTransformed$CircleID==1,]
#             ) +  geom_line(aes(y = speeds))
#     coord_cartesian(xlim = c(minX, maxX), ylim=c(minY, maxY)) +
#     facet_grid(Block ~ Sequence) +
#     ylab("Block") +
#     xlab("Sequence") +
#     theme(legend.position="none") +
#     ggtitle(paste("Device: ", device, " User: ", user))
# p
#
# p <- ggplot(dataTransformed, aes(x=Device, y=Throughput, group=Device, colour=Device )) +
#     stat_summary(fun.y="mean", geom="bar") +
#     stat_summary(fun.y="mean", geom="point", aes(shape=Device)) +
#     theme()
# p
# ggsave(file = "charts/Speed.pdf", width=20/2.54, height=16/2.54, dpi=100)
#
# plot the paths for each user and device. a single plot aggregates one entire sequence
for (device in unique(dataTransformed$Device) ) {
for (user in unique(dataTransformed$User)) {
p <- ggplot(dataTransformed[dataTransformed$Device==device &
dataTransformed$UserId==user,],
aes(x=rx, y=ry, group=Device, colour=Device )) +
geom_line() +
coord_cartesian(xlim = c(minX, maxX), ylim=c(minY, maxY)) +
facet_grid(Block ~ Sequence) +
ylab("Block") +
xlab("Sequence") +
theme(legend.position="none") +
ggtitle(paste("Device: ", device, " User: ", user))
p
filename <- paste("charts/paths/byblocksequence", device, "-user-", user, ".pdf", sep="")
print( filename  )
ggsave(file = filename, width=21/2.54, height=29/2.54, dpi=100)
}
}
# plot the paths for each user and device. a single plot aggregates one circleid
for (device in unique(dataTransformed$Device) ) {
for (user in unique(dataTransformed$User)) {
p <- ggplot(dataTransformed[dataTransformed$Device==device &
dataTransformed$UserId==user,],
aes(x=rx, y=ry, group=Device, colour=Device )) +
geom_line() +
coord_cartesian(xlim = c(minX, maxX), ylim=c(minY, maxY)) +
facet_grid(CircleID ~ .) +
ylab("Circle ID") +
xlab("x") +
theme(legend.position="none") +
ggtitle(paste("Device: ", device, " User: ", user))
p
filename <- paste("charts/paths/bycircleid-", device, "-user-", user, ".pdf", sep="")
print( filename )
ggsave(file = filename, width=21/2.54, height=29/2.54, dpi=100)
}
}
# plot INDIVIDUAL paths for each user and device.
# PRODUCES LOTS OF FILES
for (device in unique(dataTransformed$Device) ) {
for (user in unique(dataTransformed$User)) {
for (block in unique(dataTransformed$Block)) {
p <- ggplot(dataTransformed[dataTransformed$Device==device &
dataTransformed$Block==block &
dataTransformed$UserId==user,],
aes(x=rx, y=ry, group=Device, colour=Device )) +
geom_line() +
coord_cartesian(xlim = c(minX, maxX), ylim=c(minY, maxY)) +
facet_grid(CircleID ~ Sequence) +
ylab("Circle Id") +
xlab("Block") +
theme(legend.position="none") +
ggtitle(paste("Device: ", device, " User: ", user, " Block: ", block))
p
filename <- paste("charts/paths/individual-", device, "-user-", user, "-block-", block,".pdf", sep="")
print( filename )
ggsave(file = filename, width=29/2.54, height=35/2.54, dpi=100)
}
}
}
# # plot the aggregated paths each device
# dataLastBlock <- dataTransformed[dataTransformed$Block==10, ]
# p1 <- ggplot(dataLastBlock[dataLastBlock$Device=="Mouse",], aes(x=rx, y=ry, group=Device, colour=Device )) +
#     geom_line() +
#     coord_cartesian(xlim = c(0, 1000), ylim=c(-250, 250))
#
# p2 <- ggplot(dataLastBlock[dataLastBlock$Device=="LeapMotion",], aes(x=rx, y=ry, group=Device, colour=Device )) +
#     geom_line() +
#     coord_cartesian(xlim = c(0, 1000), ylim=c(-250, 250))
#
# p3 <- ggplot(dataLastBlock[dataLastBlock$Device=="Touchpad",], aes(x=rx, y=ry, group=Device, colour=Device )) +
#     geom_line() +
#     coord_cartesian(xlim = c(0, 1000), ylim=c(-250, 250)) +
#     facet_grid(Sequence ~ .)
#
# multiplot(p1, p2, p3, cols=1)
#require(RCurl) # web
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
#dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
#dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
#dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
#dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
dataMeasures <- read.csv(file="data/measures.txt", head=TRUE, sep="")
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- list( LeapMotion=c(0),  Mouse=c(1), Touchpad=c(2), LeapMotionTouchless=c(4))
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
#require(RCurl) # web
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
#dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
#dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
#dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
#dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
dataMeasures <- read.csv(file="data/measures.txt", head=TRUE, sep="")
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- list( LeapMotion=c(0),  Mouse=c(1), Touchpad=c(2), LeapMotionTouchless=c(4))
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
colnames(dataMeasures)
dataMeasures[7]
colnames(dataMeasures[7])
dataMeasures[7]
colnames(dataMeasures)
cor(dataMeasures[7:13])
cor(dataMeasures[7:13 22])
cor(dataMeasures[c(22, 7:13)])
dataMeasures[c(22, 7:13)]
dataMeasures[dataMeasures$Device=="Mouse",c(22, 7:13)]
colnames(dataMeasures[dataMeasures$Device=="Mouse",c(22, 7:13)])
cor(dataMeasures[dataMeasures$Device=="Mouse",c(22, 7:13)])
nrows(dataMeasures[dataMeasures$Device=="Mouse",c(22, 7:13)])
nrow(dataMeasures[dataMeasures$Device=="Mouse",c(22, 7:13)])
nrow(dataMeasures[c(22, 7:13)])
nrow(dataMeasures[dataMeasures$Device=="Touchpad",c(22, 7:13)])
cor(dataMeasures[dataMeasures$Device=="Touchpad",c(22, 7:13)])
cor(dataMeasures[dataMeasures$Device=="LeapMotionTouchless",c(22, 7:13)])
pcor
pcor()
pcor.test()
source("pcor.R")
pcor.test()
pcor.test(dataMeasures$Throughput,dataMeasures$TRE,dataMeasures[,c("Device","UserId")])
colnames(dataMeasures)
source("pcor.R")
dataMeasures[,c("Device","UserId")]
pcor.test(dataMeasures$Throughput,dataMeasures$TRE,dataMeasures[,c("Device","UserId")])
dataMeasures$TRE
dataMeasures$Throughput
c(dataMeasures$TRE)
plot(dataMeasures$Throughput ~ dataMeasures$TRE)
abline(lm(dataMeasures$Throughput ~ dataMeasures$TRE))
cor(dataMeasures$Throughput ~ dataMeasures$TRE)
cor(dataMeasures$Throughput, dataMeasures$TRE)
cor.test(dataMeasures$Throughput, dataMeasures$TRE)
cor.test(dataMeasures[7:13])
cor.test(dataMeasures[7:13], dataMeasures$Throughput)
confint(dataMeasures$Throughput ~ dataMeasures$TRE)
confint(dataMeasures$Throughput)
confint(lm(dataMeasures$Throughput ~ dataMeasures$TRE))
#require(RCurl) # web
source("pcor.R")
require(ggplot2)
require(doBy)
#library("stringr") # for first word
#library(reshape)
#theme_set(theme_bw())
############################ data
#dataMeasuresLeap <- read.csv(file="data/leapmotion-measures.txt", head=TRUE, sep="")
#dataMeasuresTouch <- read.csv(file="data/touchpad-measures.txt", head=TRUE, sep="")
#dataMeasuresMouse <- read.csv(file="data/mouse-measures.txt", head=TRUE, sep="")
#dataMeasures <- rbind(dataMeasuresLeap, dataMeasuresTouch, dataMeasuresMouse)
dataMeasures <- read.csv(file="data/measures.txt", head=TRUE, sep="")
# change column name to get a nicer chart
colnames(dataMeasures)[colnames(dataMeasures)=="DeviceNumber"] <- "Device"
# convert the column to factor and name the levels
dataMeasures$Device <- as.factor(dataMeasures$Device)
levels(dataMeasures$Device) <- list( LeapMotion=c(0),  Mouse=c(1), Touchpad=c(2), LeapMotionTouchless=c(4))
# print summary stats
s <- summaryBy(ErrorRate+TRE+TAC+MDC+ODC+MV+ME+MO+MovementTime~Device,
data=dataMeasures,
FUN=c(mean,sd))
t(s)
shapiro.test(dataMeasures$TRE)
nrow(dataMeasures$TRE)
nrows(dataMeasures$TRE)
dataMeasures$TRE
shapiro.test(dataMeasures$TRE)
colnames(dataMeasures)
shapiro.test(dataMeasures[UserID==4,]$TRE)
shapiro.test(dataMeasures[UserId==4,]$TRE)
shapiro.test(dataMeasures[dataMeasures$UserId==4,]$TRE)
hist(dataMeasures[dataMeasures$UserId==4,]$TRE)
hist(dataMeasures[dataMeasures$UserId==4,]$TAC)
summary(dataMeasures[dataMeasures$UserId==4,]$TAC)
summary(dataMeasures[dataMeasures$UserId==4,]$TRE)
summary(dataMeasures[dataMeasures$UserId==4,]$MO)
hist(dataMeasures[dataMeasures$UserId==4,]$MO)
shapiro.test(dataMeasures[dataMeasures$UserId==4,]$MO)
unique(dataMeasures$UserId)
tapply
tapply(dataMeasures$TRE, dataMasures$UserId, mean)
tapply(dataMeasures$TRE, dataMeasures$UserId, mean)
tapply(dataMeasures$TRE, dataMeasures$UserId~dataMeasures$Device, mean)
tapply(dataMeasures$TRE, c(dataMeasures$UserId,dataMeasures$Device), mean)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$MO)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$TRE)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$TAC)
shapiro.test(dataMeasures[dataMeasures$Device=="Mouse",]$TAC)
colnames(dataMeasures)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ErrorRate)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$MDC)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC)
wilcox.test(y,x)
wilcox.test(dataMeasures[dataMeasures$Device=="Mouse",]$TRE, dataMeasures[dataMeasures$Device=="Touchpad",]$TRE)
a <- aov(MovementTime~Device,data=dataMeasures)
summary(a)
layout(matrix(c(1,2,3,4),2,2)) # optional layout
plot(fit)
plot(a)
a <- aov(MovementTime~Device,data=dataMeasures)
summary(a)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC, bins=10)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC, breaks=10)
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC, breaks=100)
layout()
hist(dataMeasures[dataMeasures$Device=="Mouse",]$ODC, breaks=100)
